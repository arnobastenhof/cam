@ \section{Environments}\label{section:env}
The previous section spoke intuitively of binding environments in motivating
our choice of AST. The current will make their definition explicit, allowing us
in the next to implement evaluation of terms.

\subsection{Interface}

<<env.h>>=
#ifndef ENV_H_
#define ENV_H_

#include "ast.h"

<<env.h macros>>
<<env.h typedefs>>
<<env.h structs>>
<<env.h function prototypes>>

#endif /* ENV_H_ */

@ A (binding) environment is simply a tuple of values that may serve as
denotations for the free variables in a term.

<<env.h typedefs>>=
typedef struct env_s env_t;

@ Like an AST, an environment is a tree built up from nodes, specializing
cyclic linked lists. We distinguish between several types, each with different
data fields that we collect together in a union. Similarly to the previous
section, we will, until further notice, and so long as no confusion arises,
speak of nodes to refer exclusively to the components of an environment.

<<env.h structs>>=
struct env_s {
  node_t        base;
  union {
    <<env\_s union fields>>
  }             u;
  envType_t     type;
};

@ Values are carried at the leafs and can be either non-zero integers or
closures. Using pairing, we combine them together into larger structures.
Finally, we reserve a `sentinel' node type for 0-tuples, used to evaluate
closed terms in.

<<env.h typedefs>>=
typedef enum {
  ENV_PAIR,
  ENV_NIL,      /* sentinel */
  ENV_INT,      /* non-zero integers */
  ENV_CLOSURE,
} envType_t;

@ We previously spoke intuitively of a closure as the value of an abstraction.
Specifically, we may say a closure consists of the environment $\Gamma$ wherein
an abstraction was evaluated, together with the latter's body, as represented,
say, by some AST $t$, together determining the mapping $v\mapsto t(\Gamma,v)$.

<<env.h typedefs>>=
typedef struct {
  env_t *       ctx;
  ast_t *       code;
} closure_t;

@ Having determined the node types, we can fill in their corresponding data
fields in an environment. Note in particular the representation of pairs by
a pointer to a list of children, similarly to how we structured AST's.

<<env\_s union fields>>=
int         num;
env_t *     rchild;
closure_t   cl;
@
Every node has at least a type, so that we can make it a required argument to
pass in when allocating a new instance.

<<env.h function prototypes>>=
extern env_t *    Env_New(envType_t);
@
A 0-tuple is determined completely by its type, and we export a specialized
macro for its creation.

<<env.h macros>>=
#define Env_Nil()  Env_New(ENV_NIL)

@ For convenience, we similarly export dedicated methods for constructing the
other node types. [[Env_New]] itself, however, will still prove useful in those
cases where we may not know in advance what to set the data fields with.

<<env.h function prototypes>>=
extern env_t *    Env_Int(const int);
extern env_t *    Env_Pair(env_t * const, env_t * const);
extern env_t *    Env_Closure(env_t * const, ast_t * const);
@
Creating a copy of an environment results in a new instance that shares only
its references to AST's with the original.

<<env.h function prototypes>>=
extern env_t *    Env_Copy(const env_t * const);
@
Rather than leaving the client with the responsibility of cleaning up an
environment node by node, we instead export two methods for releasing them in
their entirety: one for freeing a single environment referenced by its root, in
particular leaving its siblings, if any, untouched, and the other for freeing a
list of environments.

<<env.h function prototypes>>=
extern void       Env_Free(env_t ** const);
extern void       Env_FreeList(env_t ** const);
@
\subsection{Implementation}
The chosen representation of environments bears much similarity to that adopted
for AST's, and so many of our considerations in implementing the algorithms
from the previous section will carry over for what is to follow.

<<env.c>>=
#include "env.h"

#include <assert.h>

#include "pool.h"

<<env.c global variables>>
<<env.c function definitions>>

@ Like an AST, environments must be allocated from the heap, thus requiring
their own memory pool.

<<env.c global variables>>=
static env_t    g_pool[N_ELEMS];
pool_t          g_env_pool = INIT_POOL(g_pool, N_ELEMS, env_t);

@ In creating a new node, we make sure again to clear all its bits before using
it.

<<env.c function definitions>>=
env_t *
Env_New(envType_t type)
{
  env_t * me = Pool_Calloc(&g_env_pool);
  me->type = type;
  return me;
}

@ In a similar vein, we can create new nodes of type [[ENV_INT]].

<<env.c function definitions>>=
env_t *
Env_Int(const int num)
{
  env_t * me = Pool_Calloc(&g_env_pool);
  me->type = ENV_INT;
  me->u.num = num;
  return me;
}

@ In studying the creation of a pair, recall its projections are contained in a
list.

<<env.c function definitions>>=
env_t *
Env_Pair(env_t * const left, env_t * const right)
{
  env_t *  me;

  assert(left);
  assert(right);

  me = Pool_Calloc(&g_env_pool);
  me->type = ENV_PAIR;
  Push(&me->u.rchild, right);
  Push(&me->u.rchild, left);
  return me;
}

@ Finally, we should be able to create closures.

<<env.c function definitions>>=
env_t *
Env_Closure(env_t * const ctx, ast_t * const code)
{
  env_t *  me;

  assert(ctx);
  assert(code);

  me = Pool_Calloc(&g_env_pool);
  me->type = ENV_CLOSURE;
  me->u.cl.ctx = ctx;
  me->u.cl.code = code;
  return me;
}

@ To copy an environment, we start with the root and switch on the latter's
type to determine which of its fields to copy.

<<env.c function definitions>>=
env_t *
Env_Copy(const env_t * const me)
{
  env_t *  copy;

  assert(me);

  copy = Env_New(me->type);
  switch(me->type) {
  <<[[Env_Copy]] cases>>
  default:
    assert(0);
  }
  return copy;
}

@ If the root node was a 0-tuple, we are already done.

<<[[Env_Copy]] cases>>=
case ENV_NIL:
  break;
@
If it instead carried a numeric value, we have only but to replicate it.

<<[[Env_Copy]] cases>>=
case ENV_INT:
  copy->u.num = me->u.num;
  break;
@
For closures, it is important to recall that we don't copy the AST.

<<[[Env_Copy]] cases>>=
case ENV_CLOSURE:
  copy->u.cl.ctx = Env_Copy(me->u.cl.ctx);
  copy->u.cl.code = me->u.cl.code;
  break;
@
Finally, for a pair, we need to copy both its projections.

<<[[Env_Copy]] cases>>=
case ENV_PAIR:
  Push(&copy->u.rchild, Env_Copy(me->u.rchild));
  Push(&copy->u.rchild, Env_Copy((env_t *)Link(me->u.rchild)));
  break;
@
To free an environment, we again first flatten it's tree structure into a
list. This time, however, we shall want to accept as input not just a single
environment but rather a multitude thereof, strung together into a list
already.

<<env.c function definitions>>=
static node_t *
Flatten(env_t * me)
{
  env_t * it;

  assert(me);

  it = Link(me);
  do {
    assert(it);
    if (it->type == ENV_PAIR) {
      Append(&me, it->u.rchild);
    } else if (it->type == ENV_CLOSURE) {
      Append(&me, it->u.cl.ctx);
    }
  } while ((it = Link(it)) != Link(me));

  return (node_t *)me;
}

@ To deallocate a single environment, we first make it into a singleton list
prior to flattening it.

<<env.c function definitions>>=
void
Env_Free(env_t ** const me)
{
  assert(me);

  if (*me == NULL) {
    return;
  }
  (*me)->base.link = (node_t *)*me;
  Pool_FreeList(&g_env_pool, Flatten(*me));
  *me = NULL;
}

@ In addition, we now also admit releasing a list of environments all at once.

<<env.c function definitions>>=
void
Env_FreeList(env_t ** const me)
{
  assert(me);

  if (*me == NULL) {
    return;
  }
  Pool_FreeList(&g_env_pool, Flatten(*me));
  *me = NULL;
}
